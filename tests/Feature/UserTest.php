<?php

namespace Tests\Feature;

use App\Models\Question;
use App\Models\User;
use App\Repositories\QuestionRepository;
use App\Repositories\UserRepository;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;

class UserTest extends TestCase
{
    use DatabaseMigrations,DatabaseTransactions;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->userService = app(\App\Services\UserService::class);
        $this->questionService = app(\App\Services\QuestionSerivce::class);
    }

    public function testCreateUserRepository()
    {
        $data = [
            'name' => 'User Name',
            'email' => 'email@test.com',
            'password' => bcrypt('secret'),
        ];
        $userReposicoty = new UserRepository();
        $newUser = $userReposicoty->store($data);

        $this->assertEquals('User Name', $newUser->name);
        $this->assertEquals('email@test.com', $newUser->email);
        $this->assertTrue(password_verify('secret', $newUser->password));
    }

    public function testCreateUserService()
    {
        $newUser = $this->createUser();
        $this->assertEquals('User Name', $newUser->name);
        $this->assertEquals('email@test.com', $newUser->email);
        $this->assertTrue(password_verify('secret', $newUser->password));
    }

    public function testFindUserByIdService()
    {
        $newUser = $this->createUser();
        $result = $this->userService->findById($newUser->id);

        $this->assertEquals('User Name', $newUser->name);
        $this->assertEquals('email@test.com', $newUser->email);
        $this->assertTrue(password_verify('secret', $newUser->password));
    }

    public function testRemovePreviousProgressesService()
    {
        $result = $this->userService->removePreviousProgresses();

        $this->assertNull($result);
    }

    public function testSelectUserService()
    {
        $newUser = $this->createUser();
        $result = $this->userService->selectUser($newUser->email);

        $this->assertEquals('email@test.com', $result->email);
    }

    public function testSaveAnswerService()
    {
        $user = factory(User::class)->create();
        $question = $this->createQuestion();
        $userAnswer = 'foo';
        $result = $this->userService->saveAnswer($user->id, $question->id, $userAnswer);

        $this->assertTrue($result);
    }

    public function testSaveAnswerFalseService()
    {
        $userId = 999;
        $questionId = 999;
        $userAnswer = 'foo';
        $result = $this->userService->saveAnswer($userId, $questionId, $userAnswer);

        $this->assertFalse($result);
    }

    public function testCheckCorrectAnswerService()
    {
        $question = $this->createQuestion();
        $userAnswer = '4';
        $result = $this->userService->checkAnswer($userAnswer, $question->id);

        $this->assertTrue($result);
    }

    public function testCheckWrongAnswerService()
    {
        $question = $this->createQuestion();
        $userAnswer = 'foo';
        $result = $this->userService->checkAnswer($userAnswer, $question->id);

        $this->assertFalse($result);
    }

    public function testCheckUserEndQuestionsService()
    {
        $user = factory(User::class)->create();
        $result = $this->userService->checkUserEndQuestions($user->id);

        $this->assertTrue($result);
    }

    public function testCountRightsService()
    {
        $user = factory(User::class)->create();
        $result = $this->userService->countRights($user);

        $this->assertEquals(0, $result);
    }

    public function testCountMistakesService()
    {
        $user = factory(User::class)->create();
        $result = $this->userService->countMistakes($user);

        $this->assertEquals(0, $result);
    }

    public function testValidateEmailTrueService()
    {
        $email = 'foo@email.com';
        $result = $this->userService->validateEmail($email);

        $this->assertTrue($result) ;
    }

    public function testValidateEmailFalseService()
    {
        $email = 'foo';
        $result = $this->userService->validateEmail($email);

        $this->assertFalse($result) ;
    }

    public function createUser()
    {
        $data = [
            'name' => 'User Name',
            'email' => 'email@test.com',
            'password' => bcrypt('secret'),
        ];
        return $this->userService->store($data);
    }

    public function createQuestion()
    {
        $data = [
            'question' => 'How much is 2 + 2',
            'answer' => '4',
        ];
        return $question = Question::create($data);    }
}
