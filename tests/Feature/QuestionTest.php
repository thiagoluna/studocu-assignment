<?php

namespace Tests\Feature;

use App\Models\Question;
use App\Repositories\QuestionRepository;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;

class QuestionTest extends TestCase
{
    use DatabaseMigrations,DatabaseTransactions;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->questionService = app(\App\Services\QuestionSerivce::class);
    }

    public function testCreateQuestionRepository()
    {
        $data = [
            'question' => 'How much is 2 + 2',
            'answer' => '4'
        ];

        $questionReposicoty = new QuestionRepository();
        $newQuestion = $questionReposicoty->store($data);

        $this->assertEquals('How much is 2 + 2', $newQuestion->question);
        $this->assertEquals('4', $newQuestion->answer);
    }

    public function testCreateQuestionService()
    {
        $newQuestion = $this->createQuestion();

        $this->assertEquals('1', $newQuestion->id);
    }

    public function testFindQuestionByIdService()
    {
        $newQuestion = $this->createQuestion();
        $result = $this->questionService->findById($newQuestion->id);

        $this->assertEquals('How much is 2 + 2', $newQuestion->question);
        $this->assertEquals('4', $newQuestion->answer);
    }

    public function testGetAllService()
    {
        factory(Question::class)->create();
        $result = $this->questionService->getAll();

        $this->assertCount(1, $result);
    }

    public function testSelectFieldsService()
    {
        $newQuestion = $this->createQuestion();
        $result = $this->questionService->selectFields();

        $array =  [
            '0' => [
                "id" => 1,
                "question" => "How much is 2 + 2"
            ]
        ];

        $this->assertEquals($array, $result);
    }

    public function testGet1AnswerSelectedQuestionService()
    {
        $newQuestion = factory(Question::class)->create();

        $result = $this->questionService->getAnswerSelectedQuestion($newQuestion);

        $this->assertCount(3, $result);
    }

    public function testGet2AnswerSelectedQuestionService()
    {
        $newQuestion = factory(Question::class)->create();
        factory(Question::class)->create();
        $result = $this->questionService->getAnswerSelectedQuestion($newQuestion);

        $this->assertCount(3, $result);
    }

    public function testGet3AnswerSelectedQuestionService()
    {
        $newQuestion = factory(Question::class)->create();
        factory(Question::class, 2)->create();
        $result = $this->questionService->getAnswerSelectedQuestion($newQuestion);

        $this->assertCount(3, $result);
    }

    public function testGet4AnswerSelectedQuestionService()
    {
        $newQuestion = factory(Question::class)->create();
        factory(Question::class, 3)->create();
        $result = $this->questionService->getAnswerSelectedQuestion($newQuestion);

        $this->assertCount(3, $result);
    }

    public function testArrayIdQuestions()
    {
        factory(Question::class)->create();
        $result = $this->questionService->arrayIdQuestions();
        $array = [ 0 => 1 ];

        $this->assertEquals($array, $result);
    }

    public function createQuestion()
    {
        $data = [
            'question' => 'How much is 2 + 2',
            'answer' => '4',
        ];
        return $question = Question::create($data);
    }
}
